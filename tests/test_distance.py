import unittest
from vsl_ial.cs import (
    distance,
    XYZ,
    D65,
    CS,
)
from vsl_ial.cs.cielab import CIELAB
from vsl_ial.cs.cam import Average
import numpy as np
import numpy.typing as npt


class TestCaseDistanceBase:
    def test_XYZ(self):
        self._test(
            XYZ(), [0.12412, 0.07493, 0.3093], [0.12412, 0.07493, 0.3093], 0.0
        )

        ref = (0.12412**2 + 0.42507**2 + 0.4907**2) ** 0.5
        self._test(XYZ(), [0.12412, 0.07493, 0.3093], [0.0, 0.5, 0.8], ref)

    def test_CAM16LCD_distance(self):
        from vsl_ial.cs.cam import CAM16LCD

        cs = CAM16LCD(
            illuminant_xyz=D65 * 100.0, L_A=60.0, Y_b=20.0, surround=Average
        )
        self._test(
            cs, [0.12412, 0.07493, 0.3093], [0.12412, 0.07493, 0.3093], 0.0
        )

        ref = ((0.12412 / 0.77) ** 2 + 0.42507**2 + 0.4907**2) ** 0.5
        self._test(cs, [0.12412, 0.07493, 0.3093], [0.0, 0.5, 0.8], ref)


class TestCaseDistance1D(TestCaseDistanceBase, unittest.TestCase):
    def _test(
        self,
        cs: CS,
        color1: npt.ArrayLike,
        color2: npt.ArrayLike,
        ref: float,
    ):
        res_1d = distance(cs, color1=color1, color2=color2)
        np.testing.assert_almost_equal(res_1d, ref, decimal=6)


class TestCaseDistance2D(TestCaseDistanceBase, unittest.TestCase):
    def _test(
        self,
        cs: CS,
        color1: npt.ArrayLike,
        color2: npt.ArrayLike,
        ref: float,
    ):
        res_2d = distance(cs, color1=[color1, color1], color2=[color2, color2])
        np.testing.assert_almost_equal(res_2d, [ref, ref], decimal=6)


class TestCaseDistance3D(TestCaseDistanceBase, unittest.TestCase):
    def _test(
        self,
        cs: CS,
        color1: npt.ArrayLike,
        color2: npt.ArrayLike,
        ref: float,
    ):
        res_2d = distance(
            cs,
            color1=[[color1, color1], [color1, color1]],
            color2=[[color2, color2], [color2, color2]],
        )
        np.testing.assert_almost_equal(
            res_2d, [[ref, ref], [ref, ref]], decimal=6
        )


class TestDistances(unittest.TestCase):
    Lab_pairs = (
        np.asarray(
            (
                (50.0000, 2.6772, -79.7751),
                (50.0000, 3.1571, -77.2803),
                (50.0000, 2.8361, -74.0200),
                (50.0000, -1.3802, -84.2814),
                (50.0000, -1.1848, -84.8006),
                (50.0000, -0.9009, -85.5211),
                (50.0000, 0.0000, 0.0000),
                (50.0000, -1.0000, 2.0000),
                (50.0000, 2.4900, -0.0010),
                (50.0000, 2.4900, -0.0010),
                (50.0000, 2.4900, -0.0010),
                (50.0000, 2.4900, -0.0010),
                (50.0000, -0.0010, 2.4900),
                (50.0000, -0.0010, 2.4900),
                (50.0000, -0.0010, 2.4900),
                (50.0000, 2.5000, 0.0000),
                (50.0000, 2.5000, 0.0000),
                (50.0000, 2.5000, 0.0000),
                (50.0000, 2.5000, 0.0000),
                (50.0000, 2.5000, 0.0000),
                (50.0000, 2.5000, 0.0000),
                (50.0000, 2.5000, 0.0000),
                (50.0000, 2.5000, 0.0000),
                (50.0000, 2.5000, 0.0000),
                (60.2574, -34.0099, 36.2677),
                (63.0109, -31.0961, -5.8663),
                (61.2901, 3.7196, -5.3901),
                (35.0831, -44.1164, 3.7933),
                (22.7233, 20.0904, -46.6940),
                (36.4612, 47.8580, 18.3852),
                (90.8027, -2.0831, 1.4410),
                (90.9257, -0.5406, -0.9208),
                (6.7747, -0.2908, -2.4247),
                (2.0776, 0.0795, -1.1350),
            ),
            dtype=np.float64,
        ),
        np.asarray(
            (
                (50.0000, 0.0000, -82.7485),
                (50.0000, 0.0000, -82.7485),
                (50.0000, 0.0000, -82.7485),
                (50.0000, 0.0000, -82.7485),
                (50.0000, 0.0000, -82.7485),
                (50.0000, 0.0000, -82.7485),
                (50.0000, -1.0000, 2.0000),
                (50.0000, 0.0000, 0.0000),
                (50.0000, -2.4900, 0.0009),
                (50.0000, -2.4900, 0.0010),
                (50.0000, -2.4900, 0.0011),
                (50.0000, -2.4900, 0.0012),
                (50.0000, 0.0009, -2.4900),
                (50.0000, 0.0010, -2.4900),
                (50.0000, 0.0011, -2.4900),
                (50.0000, 0.0000, -2.5000),
                (73.0000, 25.0000, -18.0000),
                (61.0000, -5.0000, 29.0000),
                (56.0000, -27.0000, -3.0000),
                (58.0000, 24.0000, 15.0000),
                (50.0000, 3.1736, 0.5854),
                (50.0000, 3.2972, 0.0000),
                (50.0000, 1.8634, 0.5757),
                (50.0000, 3.2592, 0.3350),
                (60.4626, -34.1751, 39.4387),
                (62.8187, -29.7946, -4.0864),
                (61.4292, 2.2480, -4.9620),
                (35.0232, -40.0716, 1.5901),
                (23.0331, 14.9730, -42.5619),
                (36.2715, 50.5065, 21.2231),
                (91.1528, -1.6435, 0.0447),
                (88.6381, -0.8985, -0.7239),
                (5.8714, -0.0985, -2.2286),
                (0.9033, -0.0636, -0.5514),
            ),
            dtype=np.float64,
        ),
    )

    def test_ciede2000(self):
        ref_ciede2000 = [
            2.04245968,
            2.86151017,
            3.4411906,
            0.99999886,
            1.0000047,
            1.00001297,
            2.36685882,
            2.36685882,
            7.17917201,
            7.17916264,
            7.21947215,
            7.21947421,
            4.80452169,
            4.80452451,
            4.74607111,
            4.3064821,
            27.1492313,
            22.89769247,
            31.90300465,
            19.45352143,
            1.00002634,
            0.99997287,
            1.0000495,
            1.00003476,
            1.26442001,
            1.2629593,
            1.8730705,
            1.86449523,
            2.03725827,
            1.41457792,
            1.44412908,
            1.53811701,
            0.63772767,
            0.90823284,
        ]

        res = distance(
            CIELAB(illuminant_xyz=D65),
            self.Lab_pairs[0],
            self.Lab_pairs[1],
            name="ciede2000",
        )
        np.testing.assert_almost_equal(res, ref_ciede2000, decimal=6)
        res = distance(
            CIELAB(illuminant_xyz=D65),
            self.Lab_pairs[1],
            self.Lab_pairs[0],
            name="ciede2000",
        )
        np.testing.assert_almost_equal(res, ref_ciede2000, decimal=6)

    def test_cie94(self):
        ref_cie94 = [
            1.39503887,
            1.93410055,
            2.45433566,
            0.68449187,
            0.6695627,
            0.69194527,
            2.23606798,
            2.03163832,
            4.80069441,
            4.80069445,
            4.80069449,
            4.80069453,
            4.80069441,
            4.80069445,
            4.80069449,
            3.40774352,
            34.6891632,
            29.44137328,
            27.91408781,
            24.93766082,
            0.82213163,
            0.71658427,
            0.8048753,
            0.75284394,
            1.39099471,
            1.24808929,
            1.29795787,
            1.82045088,
            2.55613309,
            1.42491303,
            1.41945261,
            2.3225685,
            0.93853308,
            1.30654464,
        ]

        res = distance(
            CIELAB(illuminant_xyz=D65),
            self.Lab_pairs[0],
            self.Lab_pairs[1],
            name="cie94",
        )
        # warning! cie94 is not symmetric
        np.testing.assert_almost_equal(res, ref_cie94, decimal=6)

    def test_cbLCH(self):
        ref_cbLCH = [
            2.108761,
            2.96734795,
            3.57434939,
            1.03619468,
            1.04096925,
            1.04143441,
            2.36685882,
            2.36685882,
            7.17917203,
            7.17916264,
            7.21947218,
            7.21947426,
            4.80452176,
            4.80452451,
            4.7460712,
            5.26041284,
            41.76493928,
            39.20570229,
            43.18013613,
            28.74880376,
            1.35721015,
            0.99997287,
            1.40580086,
            1.23333785,
            1.93110853,
            1.88727988,
            2.76543478,
            2.67193173,
            4.61983542,
            2.14461801,
            2.21711783,
            2.19268158,
            1.0085518,
            1.45883087,
        ]

        res = distance(
            CIELAB(illuminant_xyz=D65),
            self.Lab_pairs[0],
            self.Lab_pairs[1],
            name="cbLCH",
        )

        np.testing.assert_almost_equal(res, ref_cbLCH, decimal=6)

    def test_cbLAB(self):
        ref_cbLAB = [
            5.6506,
            8.6253,
            11.5646,
            2.9131,
            3.2369,
            3.6735,
            3.0,
            3.0,
            4.9819,
            4.982,
            4.9821,
            4.9822,
            4.9819,
            4.982,
            4.9821,
            5.0,
            63.5,
            47.5,
            38.5,
            44.5,
            1.259,
            0.7972,
            1.2123,
            1.0942,
            3.5414,
            3.2736,
            2.0388,
            6.3079,
            9.5593,
            5.6761,
            2.186,
            2.8424,
            1.2917,
            1.901,
        ]

        res = distance(
            CIELAB(illuminant_xyz=D65),
            self.Lab_pairs[0],
            self.Lab_pairs[1],
            name="cbLAB",
        )

        np.testing.assert_almost_equal(res, ref_cbLAB, decimal=6)

    def test_HyAB(self):
        ref_HyAB = [
            4.00106328,
            6.31415011,
            9.1776999,
            2.06270077,
            2.36957073,
            2.91529271,
            2.23606798,
            2.23606798,
            4.98000036,
            4.9800004,
            4.98000044,
            4.98000049,
            4.98000036,
            4.9800004,
            4.98000044,
            3.53553391,
            51.81405907,
            40.9541316,
            35.65215001,
            34.21545346,
            0.89242934,
            0.7972,
            0.8583065,
            0.82982507,
            3.38050031,
            2.39718215,
            1.67170437,
            4.66581981,
            6.88718802,
            4.07148163,
            1.81396538,
            2.69608748,
            1.17795342,
            1.77518815,
        ]

        res = distance(
            CIELAB(illuminant_xyz=D65),
            self.Lab_pairs[0],
            self.Lab_pairs[1],
            name="HyAB",
        )
        np.testing.assert_almost_equal(res, ref_HyAB, decimal=6)

    def test_HyCH(self):
        ref_HyCH = [
            1.60804119,
            2.14339447,
            2.53394949,
            0.78217299,
            0.74665143,
            0.74120815,
            2.36685882,
            2.36685882,
            7.17917201,
            7.17916264,
            7.21947215,
            7.21947421,
            4.80452169,
            4.80452451,
            4.74607111,
            4.30654125,
            38.3737459,
            30.76922792,
            32.26665974,
            25.56037694,
            1.00002634,
            0.99997287,
            1.0000495,
            1.00003476,
            1.43118147,
            1.41493086,
            1.99077403,
            1.9131517,
            3.37963892,
            1.56446771,
            1.64499804,
            1.98703484,
            0.87490583,
            1.28194896,
        ]

        res = distance(
            CIELAB(illuminant_xyz=D65),
            self.Lab_pairs[0],
            self.Lab_pairs[1],
            name="HyCH",
        )
        np.testing.assert_almost_equal(res, ref_HyCH, decimal=6)
